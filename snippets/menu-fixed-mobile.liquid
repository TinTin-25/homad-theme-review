{{ 'menu-fixed-mobile.css' | asset_url | stylesheet_tag }}
<sticky-bottom class="menuFixMobile position-fixed pt-2 pb-1 w-100 bg-white d-flex d-lg-none aling-items-center justify-content-around text-center">
    <a href="{{ routes.root_url }}" tabindex="-1">
        {%- render 'icons', icon: 'home', attr: 'width="18" height="18"'-%}
        <span class="d-block fs-13 fw-medium text-secondary">{{ 'general.breadcrumbs.home_link_title'| t }}</span>
    </a>
    <a href="{{ routes.all_products_collection_url }}" tabindex="-1">
        {%- render 'icons', icon: 'shop', attr: 'width="18" height="18"' -%}
        <span class="d-block fs-13 fw-medium text-secondary">{{ 'general.breadcrumbs.shop'| t }}</span>
    </a>
    <button type="button" class="p-0 border-0 bg-transparent" data-bs-toggle="modal" data-bs-target="#searchTop">
        {%- render 'icons', icon: 'search', attr: 'width="18" height="18" ' -%}
        <span class="d-block fs-13 fw-medium text-secondary">{{ 'general.search.search' | t }}</span>
    </button>
    {%- if settings.product_wishlist -%}
        <a class="wishlist-count" href="{{root_url}}/pages/wishlist" title="{{ 'products.product.wishlist' | t }}">
            <div class="position-relative d-inline-block lh-1">
                {%- render 'icons', icon: 'heart', attr: 'width="18" height="18" ' -%}
                <span class="count" data-wishlist-count>0</span>
            </div>
            <span class="d-block fs-13 fw-medium text-secondary">{{ 'products.product.wishlist' | t }}</span>
        </a> 
    {%- endif -%}
    {%- assign pageType = request.page_type | handle -%}
    {%- if shop.customer_accounts_optional or shop.customer_accounts_enabled -%}
        <{% if customer or pageType == 'customers-login' %}a href="{{routes.account_url}}" title="{{ 'customer.account.title' | t }}"{% else %}div type="button" data-bs-toggle="offcanvas" data-bs-target="#velaTopLinks"{% endif  %}>
            {%- render 'icons', icon: 'user', attr: 'width="18" height="18" ' -%}
            <span class="d-block fs-13 fw-medium text-secondary">{{ 'customer.account.title' | t }}</span>
        </{% if customer or pageType == 'customers-login'  %}{% else %}div{% endif  %}>
    {%- endif -%}
</sticky-bottom>
<script>
    class StickyBottom extends HTMLElement {
        constructor() {
          super();
        }
        connectedCallback() {
            this.menuBottom = document.querySelector('.menuFixMobile');
            this.menuBottomBounds = {}; 
            this.setHeaderHeight();
            window.addEventListener('change', this.setHeaderHeight.bind(this));  
            this.currentScrollTop = 0;
            this.preventReveal = false;
            this.onScrollHandler = this.onScroll.bind(this);
            this.hideMenuFixMobleOnScrollUp = () => this.preventReveal = true;
            this.addEventListener('preventMenuFixMobleReveal', this.hideMenuFixMobleOnScrollUp);
            window.addEventListener('scroll', this.onScrollHandler, false);
            this.createObserver();
        }
        setHeaderHeight() {
            document.documentElement.style.setProperty('--menuFixBottom-height', `${this.menuBottom.offsetHeight}px`);
        }
        disconnectedCallback() {
            this.removeEventListener('preventMenuFixMobleReveal', this.hideMenuFixMobleOnScrollUp);
            window.removeEventListener('scroll', this.onScrollHandler);
        }
        createObserver() {
            let observer = new IntersectionObserver((entries, observer) => {
            observer.disconnect();
        });
            observer.observe(this.menuBottom);
        }
        onScroll() {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            if (scrollTop > this.currentScrollTop) {
                if (this.preventHide) return;
                requestAnimationFrame(this.show.bind(this));
            } else if (scrollTop < this.currentScrollTop) {
                if (!this.preventReveal) {
                requestAnimationFrame(this.reveal.bind(this));
                } else {
                    window.clearTimeout(this.isScrolling);
                    this.isScrolling = setTimeout(() => {
                    this.preventReveal = false;
                    }, 66);
                    requestAnimationFrame(this.show.bind(this));
                }
            } else if (scrollTop <= this.menuBottomBounds.top) {
                requestAnimationFrame(this.reset.bind(this));
            }
            this.currentScrollTop = scrollTop;
        }
        show() {
            this.menuBottom.classList.add('menuBottom-show');
            document.body.classList.add('scrolled-past-menuBottom');
        }
        reveal() {
            this.menuBottom.classList.add('animate');
            this.menuBottom.classList.remove('menuBottom-show');
            document.body.classList.remove('scrolled-past-menuBottom');
        }
        reset() {
            this.menuBottom.classList.remove('menuBottom-show','animate');
            document.body.classList.remove('scrolled-past-menuBottom');
        }
    }
    customElements.define('sticky-bottom', StickyBottom);
</script>
